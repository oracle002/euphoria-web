// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Participants {
  participant_id Int @id @default(autoincrement())
  email String @unique
  password String 
  name String 
  college String @db.VarChar(250)
  phone String 
  event_participant Event_participants[]
  auth_token String? @unique
  Teams Teams[]
}

model Events {
  event_id Int @id @default(autoincrement())
  event_name String 
  amount Float
}


model Event_payment{
  payment_id Int @id @default(autoincrement())
  amount Float
  screenshot String
  uuid String 
  upi_transaction_id String
  participation Event_participants[] 
}

model Event_participants{
  event_participant_id Int @id @default(autoincrement())
  event_code String @db.VarChar(3)
  participant Participants @relation(fields: [participant_id], references: [participant_id])
  participant_id Int
  verified Boolean @default(false)
  event_payment Event_payment @relation(fields: [payment_id], references: [payment_id])
  payment_id Int

  created_at DateTime @default(now())
}

model Teams{
  team_id Int @id @default(autoincrement())
  team_name String
  college String
  lock Boolean @default(false)
  Leader Participants @relation(fields:[leader_id], references: [participant_id] )
  leader_id Int
  Team_members Team_members[]
  game_member Gamer[]
  riot_id String?
  discord_id String?
}

model Team_members{
  team_member_id Int @id @default(autoincrement())
  email String @unique
  name String
  phone String
  team_id Int
  Team Teams @relation(fields: [team_id], references: [team_id])
}

model Gamer{
  member_id Int @id @default(autoincrement())
  email String @unique
  name String
  college String?
  phone String
  riot_id String
  discord_id String
  substitute Boolean @default(false)
  team_id Int
  Team Teams @relation(fields: [team_id], references: [team_id])
}

model Admins {

  admin_id Int @unique @default(autoincrement())
  username String
  password String
}

model Viewers {
  viewer_id Int @unique @default(autoincrement())
  name String
  email String
  phone String
  password String
  ticket Tickets?
}

model Tickets {
  ticket_id Int @unique @default(autoincrement())
  viewer_id Int @unique
  viewer Viewers @relation(fields: [viewer_id], references: [viewer_id])
  count Int
  upi_transaction_id String?
  screenshot String?
  verified Boolean @default(false)
  uuid String @unique
}